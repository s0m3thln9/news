generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uuid         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String    @unique
  firstName    String
  lastName     String
  password     String
  role         UserRole  @default(USER)
  language     Language?
  createdAt    DateTime  @default(dbgenerated("NOW()")) @db.Timestamptz(3)
  updatedAt    DateTime  @updatedAt @db.Timestamptz(3)
  Location     Location? @relation(fields: [locationUuid], references: [uuid], onDelete: Cascade)
  locationUuid String?   @db.Uuid
  news         News[]
}

enum UserRole {
  USER // обычный пользователь: просмотр новостей, редактирование своих данных
  EDITOR // редактор: постит в своей категории
  ADMIN // админ: назначает роли, создаёт категории, полный доступ
}

enum Language {
  RU
  EN
}

model Location {
  uuid      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title     String
  image     String?
  editors   User[]
  createdAt DateTime @default(dbgenerated("NOW()")) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
  news      News[]
}

model News {
  uuid         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  author       User      @relation(fields: [userUuid], references: [uuid], onDelete: Cascade)
  images       String[]
  title        String
  description  String
  content      String
  pinnedAt     DateTime?
  location     Location  @relation(fields: [locationUuid], references: [uuid], onDelete: Cascade)
  createdAt    DateTime  @default(dbgenerated("NOW()")) @db.Timestamptz(3)
  updatedAt    DateTime  @updatedAt @db.Timestamptz(3)
  userUuid     String    @db.Uuid
  locationUuid String    @db.Uuid
}
