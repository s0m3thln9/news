generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uuid                  String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                 String                  @unique
  firstName             String
  lastName              String
  password              String
  role                  UserRole                @default(USER)
  userEmailVerification UserEmailVerification[]
  emailVerificationAt   DateTime?
  createdAt             DateTime                @default(dbgenerated("NOW()")) @db.Timestamptz(3)
  updatedAt             DateTime                @updatedAt @db.Timestamptz(3)
  editorLocations       EditorLocation[]
}

model UserEmailVerification {
  uuid      String                      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code      String
  user      User                        @relation(fields: [userUuid], references: [uuid])
  userUuid  String                      @db.Uuid
  status    UserEmailVerificationStatus @default(PENDING)
  createdAt DateTime                    @default(dbgenerated("NOW()")) @db.Timestamptz(3)
  updatedAt DateTime                    @updatedAt @db.Timestamptz(3)
}

enum UserRole {
  USER // обычный пользователь: просмотр новостей, редактирование своих данных
  EDITOR // редактор: постит в своей категории
  ADMIN // админ: назначает роли, создаёт категории, полный доступ
}

enum UserEmailVerificationStatus {
  PENDING
  FULLFILLED
}

model Location {
  uuid      String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title     String
  editors   EditorLocation[]
  createdAt DateTime         @default(dbgenerated("NOW()")) @db.Timestamptz(3)
  updatedAt DateTime         @updatedAt @db.Timestamptz(3)
}

model EditorLocation {
  uuid         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user         User     @relation(fields: [userUuid], references: [uuid])
  userUuid     String   @db.Uuid
  location     Location @relation(fields: [locationUuid], references: [uuid])
  locationUuid String   @db.Uuid
  createdAt    DateTime @default(dbgenerated("NOW()")) @db.Timestamptz(3)
  updatedAt    DateTime @updatedAt @db.Timestamptz(3)

  @@unique([userUuid, locationUuid])
}
